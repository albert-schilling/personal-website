{"version":3,"sources":["js/script.js"],"names":["checkInSight","className","toggleClass","fadeOutArticlesArray","document","getElementsByClassName","i","length","id","ArticleID","fadeOutArticle","window","innerHeight","getBoundingClientRect","top","classList","contains","add","remove","ifInSightStartFunc","writeWidthOnSight","writeZeroWidthIfNotInSight","mainElement","getElementsByTagName","visibleFunc","visibleFuncParam","unvisibleFunc","unvisibleFuncParam","targetElementsArray","console","log","targetElement","heightWindow","difference","el","elParent","parentNode","elWidth","innerHTML","style","width","addEventListener"],"mappings":";AAEA,SAASA,EAAaC,EAAWC,GAG1B,IAFDC,IAAAA,EAAuBC,SAASC,uBAAuBJ,GAElDK,EAAI,EAAGA,GAAKH,EAAqBI,OAAQD,IAAK,CACrCH,EAAqBG,EAAI,GAAGE,GAAxCC,IACAC,EAAiBP,EAAqBG,EAAI,GAC3BK,OAAOC,YACTF,EAAeG,wBAAwBC,IAGvC,IAEVJ,EAAeK,UAAUC,SAASd,IACrCQ,EAAeK,UAAUE,IAAIf,GAG3BQ,EAAeK,UAAUC,SAASd,IAEpCQ,EAAeK,UAAUG,OAAO,aAQxClB,EAAa,cAAe,YAE5BmB,EACE,uBACAC,EACA,uBACAC,EACA,wBAIF,IAAMC,EAAclB,SAASmB,qBAAqB,QAAQ,GAiB1D,SAASJ,EACPlB,EACAuB,EACAC,EACAC,EACAC,GAEMC,IAAAA,EAAsBxB,SAASC,uBAAuBJ,GAC5D4B,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAoB,IAC3B,IAAA,IAAItB,EAAI,EAAGA,EAAIsB,EAAoBrB,OAAQD,IAAK,CACnDuB,QAAQC,IAAIxB,GACZuB,QAAQC,IAAIF,EAAoBtB,IAC5ByB,IAAAA,EAAgBH,EAAoBtB,GACxCuB,QAAQC,IAAIC,GACRC,IAEAC,EAFetB,OAAOC,YACTmB,EAAclB,wBAAwBC,IAEvDe,QAAQC,IAAIG,GAERA,EAAa,KACfP,EAAcC,GACdE,QAAQC,IAAI,iBAEZN,EAAYC,GACZI,QAAQC,IAAI,aAMlB,SAASV,EAAkBnB,GAEpB,IADCiC,IAAAA,EAAK9B,SAASC,uBAAuBJ,GAClCK,EAAI,EAAGA,EAAI4B,EAAG3B,OAAQD,IAAK,CAC5B6B,IAAAA,EAAWD,EAAG5B,GAAG8B,WACjBC,EAAUH,EAAG5B,GAAGgC,UACtBH,EAASI,MAAMC,MAAQH,GAO3B,SAAShB,EAA2BpB,GAE7B,IADCiC,IAAAA,EAAK9B,SAASC,uBAAuBJ,GAClCK,EAAI,EAAGA,EAAI4B,EAAG3B,OAAQD,IAAK,CACjB4B,EAAG5B,GAAG8B,WACdG,MAAMC,MAAQ,GA9D3BlB,EAAYmB,iBAAiB,SAAU,WACrCzC,EAAa,cAAe,cAE9BsB,EAAYmB,iBAAiB,SAAU,WACrCtB,EACE,0BACAC,EACA,uBACAC,EACA","file":"script.ac1127cd.js","sourceRoot":"../src","sourcesContent":["// Function checkInSight to calculate if an element with specified className\n// is inside the viewport (> 150px) and then toggle specified className \"toggleClass\"\nfunction checkInSight(className, toggleClass) {\n  let fadeOutArticlesArray = document.getElementsByClassName(className)\n\n  for (let i = 1; i <= fadeOutArticlesArray.length; i++) {\n    let ArticleID = fadeOutArticlesArray[i - 1].id\n    let fadeOutArticle = fadeOutArticlesArray[i - 1]\n    let heightWindow = window.innerHeight\n    let articleTop = fadeOutArticle.getBoundingClientRect().top\n    let difference = heightWindow - articleTop\n\n    if (difference < 150) {\n      // console.log(`Article with ID \"${ArticleID}\" is not in sight.`);\n      if (!fadeOutArticle.classList.contains(toggleClass)) {\n        fadeOutArticle.classList.add(toggleClass)\n      }\n    } else {\n      if (fadeOutArticle.classList.contains(toggleClass)) {\n        // console.log(`Article with ID \"${ArticleID}\" is in sight.`);\n        fadeOutArticle.classList.remove('fade-out')\n        // console.log(`Class \"${ArticleID}\" has been removed.`);\n      }\n    }\n  }\n}\n\n// Initial function call\ncheckInSight('fade-effect', 'fade-out')\n\nifInSightStartFunc(\n  'progress-bar__number',\n  writeWidthOnSight,\n  'progress-bar__number',\n  writeZeroWidthIfNotInSight,\n  'progress-bar__number'\n)\n\n// Add scroll event and call specified functions\nconst mainElement = document.getElementsByTagName('main')[0]\n\nmainElement.addEventListener('scroll', () => {\n  checkInSight('fade-effect', 'fade-out')\n})\nmainElement.addEventListener('scroll', () => {\n  ifInSightStartFunc(\n    'progress-bar__container',\n    writeWidthOnSight,\n    'progress-bar__number',\n    writeZeroWidthIfNotInSight,\n    'progress-bar__number'\n  )\n})\n\n// Function ifInSightStartFunc to calculate if an element with specified className\n// is inside the viewport (> 150px) and then start specified function\nfunction ifInSightStartFunc(\n  className,\n  visibleFunc,\n  visibleFuncParam,\n  unvisibleFunc,\n  unvisibleFuncParam\n) {\n  const targetElementsArray = document.getElementsByClassName(className)\n  console.log(targetElementsArray)\n  console.log(targetElementsArray[0])\n  for (let i = 0; i < targetElementsArray.length; i++) {\n    console.log(i)\n    console.log(targetElementsArray[i])\n    let targetElement = targetElementsArray[i]\n    console.log(targetElement)\n    let heightWindow = window.innerHeight\n    let elementTop = targetElement.getBoundingClientRect().top\n    let difference = heightWindow - elementTop\n    console.log(difference)\n\n    if (difference < 150) {\n      unvisibleFunc(unvisibleFuncParam)\n      console.log('not visible')\n    } else {\n      visibleFunc(visibleFuncParam)\n      console.log('visible')\n    }\n  }\n}\n\n// take content from specified class and set as width into parentNode\nfunction writeWidthOnSight(className) {\n  const el = document.getElementsByClassName(className)\n  for (let i = 0; i < el.length; i++) {\n    const elParent = el[i].parentNode\n    const elWidth = el[i].innerHTML\n    elParent.style.width = elWidth\n    // const elemNumber = elem[0].firstChild.innerHTML\n    // elem[0].style.width = `${elemNumber}%`\n  }\n}\n\n// Set width to 0 if not in sight:\nfunction writeZeroWidthIfNotInSight(className) {\n  const el = document.getElementsByClassName(className)\n  for (let i = 0; i < el.length; i++) {\n    const elParent = el[i].parentNode\n    elParent.style.width = 0\n  }\n}\n"]}